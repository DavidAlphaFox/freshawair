# modified from https://github.com/esy/esy/blob/master/Dockerfile
FROM ocaml/opam2:debian-stable as esybuilder
USER root
RUN apt-get install -y make m4 git gcc g++ musl-dev perl git
WORKDIR /src/
RUN git clone https://github.com/esy/esy.git --depth 1
WORKDIR /src/esy
RUN ls -al
RUN opam init -y --disable-sandboxing --bare
# RUN opam switch list-available
RUN opam switch create esy-local-switch ocaml-base-compiler.4.10.0 -y
RUN opam repository add -y duniverse https://github.com/dune-universe/opam-repository.git#duniverse
RUN opam install . --deps-only -y
RUN opam exec -- dune build -p esy && \
  opam exec -- dune build @install && \
  opam exec -- dune install --prefix /usr/local && \
  esy  && \
  esy release && \
  mv _release /app/_release && \
  rm -rf /app/esy && \
  rm -rf /root/.opam && \
  rm -rf /root/.esy

# docker buildx build --progress plain --platform linux/arm/v7 -t deleteme .
# ... linux/amd64,linux/arm64,
# https://github.com/esy/esy/blob/master/Dockerfile
FROM ocaml/opam2:debian-stable AS builder
SHELL ["/bin/bash", "-c"]
WORKDIR /app
USER root
RUN apt-get install -y \
  # for esy
  curl \
  git \
  # opam lib build-time dependencies required by packages in package.json::dependencies
  m4 \
  musl-dev \
  libc-dev \
  # postgresql-client \
  # postgresql-dev \
  libpq-dev \
  # hacks
  tree
USER opam
COPY --from=esybuilder /usr/local/bin/esy /usr/local/bin/esy
# install node
# ENV NODE_VERSION 14.13.1
# ENV NVM_DIR="$HOME/.nvm"
# ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH
# RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash \
#   && source $NVM_DIR/nvm.sh \
#   && nvm install ${NODE_VERSION}

# # install esy
# RUN npm install --verbose --global esy

# # use esy
# RUN ls -al $NVM_DIR/versions/node/v$NODE_VERSION/bin
# COPY package.json .
# RUN ls -al $NVM_DIR/versions/node/v$NODE_VERSION/bin/esy \
#         && $NVM_DIR/versions/node/v$NODE_VERSION/bin/esy
# RUN esy
# COPY . .
# RUN esy build --release
RUN opam switch import freshawair.opam.deps
